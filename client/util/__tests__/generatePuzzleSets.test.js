import generatePuzzleSets from '../generatePuzzleSets'

describe('generatePuzzleSets', () => {
  it('should divide the puzzle and generate sets correctly', () => {
    const puzzle = [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [10, 11, 12, 13, 14, 15, 16, 17, 18],
      [19, 20, 21, 22, 23, 24, 25, 26, 27],
      [28, 29, 30, 31, 32, 33, 34, 35, 36],
      [37, 38, 39, 40, 41, 42, 43, 44, 45],
      [46, 47, 48, 49, 50, 51, 52, 53, 54],
      [55, 56, 57, 58, 59, 60, 61, 62, 63],
      [64, 65, 66, 67, 68, 69, 70, 71, 72],
      [73, 74, 75, 76, 77, 78, 79, 80, 81]
    ]

    const divisions = [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [10, 11, 12, 13, 14, 15, 16, 17, 18],
      [19, 20, 21, 22, 23, 24, 25, 26, 27],
      [28, 29, 30, 31, 32, 33, 34, 35, 36],
      [37, 38, 39, 40, 41, 42, 43, 44, 45],
      [46, 47, 48, 49, 50, 51, 52, 53, 54],
      [55, 56, 57, 58, 59, 60, 61, 62, 63],
      [64, 65, 66, 67, 68, 69, 70, 71, 72],
      [73, 74, 75, 76, 77, 78, 79, 80, 81],

      [1, 10, 19, 28, 37, 46, 55, 64, 73],
      [2, 11, 20, 29, 38, 47, 56, 65, 74],
      [3, 12, 21, 30, 39, 48, 57, 66, 75],
      [4, 13, 22, 31, 40, 49, 58, 67, 76],
      [5, 14, 23, 32, 41, 50, 59, 68, 77],
      [6, 15, 24, 33, 42, 51, 60, 69, 78],
      [7, 16, 25, 34, 43, 52, 61, 70, 79],
      [8, 17, 26, 35, 44, 53, 62, 71, 80],
      [9, 18, 27, 36, 45, 54, 63, 72, 81],

      [1, 2, 3, 10, 11, 12, 19, 20, 21],
      [4, 5, 6, 13, 14, 15, 22, 23, 24],
      [7, 8, 9, 16, 17, 18, 25, 26, 27],
      [28, 29, 30, 37, 38, 39, 46, 47, 48],
      [31, 32, 33, 40, 41, 42, 49, 50, 51],
      [34, 35, 36, 43, 44, 45, 52, 53, 54],
      [55, 56, 57, 64, 65, 66, 73, 74, 75],
      [58, 59, 60, 67, 68, 69, 76, 77, 78],
      [61, 62, 63, 70, 71, 72, 79, 80, 81]
    ]

    const sets = divisions.map(division => new Set(division))
    const results = generatePuzzleSets(puzzle)

    sets.forEach((set, i) => {
      const result = results[i]
      expect(set.size === result.size).to.be.true

      set.forEach(value => {
        expect(result.has(value)).to.be.true
      })
    })
  })
})
